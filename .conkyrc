--[[
#======================================================================================
# CONKY
# For commands in conky.config section:
# http://conky.sourceforge.net/config_settings.html
#
# For commands in conky.text section:
# http://conky.sourceforge.net/variables.html
#======================================================================================
# Based on:
# - https://github.com/christitustech/titus-conky
# - https://github.com/Martinsos/dotfiles/blob/master/conkyrc
#======================================================================================
# For this conky configuration to work, you have to install:
# - lm_sensors
# - nvidia-smi
#======================================================================================
]]

conky.config = {
  -- Conky settings --
  update_interval    = 2,          -- update interval
  total_run_times    = 0,          -- total number of times for Conky to update before quitting
  cpu_avg_samples    = 2,          -- the number of samples to average for CPU monitoring.
  net_avg_samples    = 2,          -- the number of samples to average for net data
  diskio_avg_samples = 10,         -- the number of samples to average for disk I/O monitoring.
  imlib_cache_size   = 0,          -- disable image cache to get a new spotify cover per song
  double_buffer      = true,       -- Use the Xdbe extension? (eliminates flicker)
  no_buffers         = true,       -- Subtract (file system) buffers from used memory?
  background         = true,       -- forked to background
  temperature_unit   = 'celsius',  -- fahrenheit or celsius
  if_up_strictness   = 'address',  -- the interface is going to be up if it has a link and assigned IP: up, link, address

  -- Text settings --
  use_xft              = true,                 -- xft font - anti-aliased font
  font                 = 'Fira Code:size=10',  -- font for complete conky unless in code defined
  override_utf8_locale = true,                 -- force UTF8 requires xft
  text_buffer_size     = 2048,                 -- size of buffer for display of content of large variables - default 256

  -- Window specifications --
  own_window             = true,                                                -- create your own window to draw
  own_window_type        = 'normal',                                            -- if own_window true options are: normal/override/dock/desktop/panel
  own_window_transparent = true,                                                -- if own_window_argb_visual is true sets background opacity 0%
  own_window_hints       = 'undecorated,below,sticky,skip_taskbar,skip_pager',  -- if own_window true - just hints - own_window_type sets it
  own_window_argb_visual = true,                                                -- use ARGB - composite manager required

  alignment          = 'middle_right',  -- top_left,top_middle,top_right,bottom_left,bottom_middle,bottom_right,middle_left,middle_middle,middle_right,none
  gap_x              = 15,              -- pixels between right or left border
  gap_y              = 0,               -- pixels between bottom or left border
  minimum_height     = 0,               -- minimum height of window
  minimum_width      = 300,             -- minimum width of window
  maximum_width      = 300,             -- maximum width of window
  default_bar_height = 10,              -- default is 6

  -- Graphics settings --
  draw_shades   = false,        -- draw shades
  default_color = '#ECEFF4',    -- default color and border color

  color0 = '#5E81AC',
  color1 = '#81A1C1',

  -- The colors for the gradient
  color6 = '#DDA87D',
  color7 = '#EBCB8B',
  color8 = '#D08770',
  -- The color for the graph/bar borders
  color9 = '#434C5E',
};

conky.text = [[
${voffset 4}${font Fira Code Bold:size=32}$alignc${time %l}:${time %M} ${time %p}$font
${voffset 4}${font Fira Code:size=12}$alignc${time %A} ${time %B} ${time %e}, ${time %Y}$font
$color0${voffset 2}System ${hr 2}$color
${color1}Hostname:$color$alignr$nodename
${color1}Kernel:$color$alignr${exec uname} ${exec uname -r}
${color1}Distro:$color$alignr$sysname$alignr${execi 6000 lsb_release -a | grep 'Description'| awk {'print $3, $4, $5'} | xargs}
#Nvidia: $alignr${execp  nvidia-smi --query-supported-clocks=gpu_name --format=csv,noheader}
#Nvidia Driver: $alignr${execi 60000 nvidia-smi | grep "Driver Version"| awk {'print $3'}}
${color1}Uptime:$color$alignr$uptime
#
${color0}Processors ${hr 2}$color
${color1}Temperature:$color$alignr${execi 4 sensors | grep 'Core ' | awk '{total += $3; count++} END {printf "%.0f", total/count}' | sed 's/+//' | sed 's/\.0//g'} °C
${color9}${execigraph 4 "sensors | grep 'Core ' | awk '{total += $3; count++} END {printf "%.0f", total/count}' | sed 's/+//' | sed 's/\.0//g'" 10,300 EBCB8B D08770 -t}$color
${color1}Frequency:$color$alignr${freq_g (1)}GHz
$color9${cpugraph cpu0 10,300 EBCB8B D08770 -t}
$alignc${cpugraph cpu1 10,55 EBCB8B D08770 -t}  ${cpugraph cpu2 10,55 EBCB8B D08770 -t}  ${cpugraph cpu3 10,55 EBCB8B D08770 -t}  ${cpugraph cpu4 10,55 EBCB8B D08770 -t}
$alignc${cpugraph cpu5 10,55 EBCB8B D08770 -t}  ${cpugraph cpu6 10,55 EBCB8B D08770 -t}  ${cpugraph cpu7 10,55 EBCB8B D08770 -t}  ${cpugraph cpu8 10,55 EBCB8B D08770 -t}
$alignc${cpugraph cpu9 10,55 EBCB8B D08770 -t}  ${cpugraph cpu10 10,55 EBCB8B D08770 -t}  ${cpugraph cpu11 10,55 EBCB8B D08770 -t}  ${cpugraph cpu12 10,55 EBCB8B D08770 -t}$color
#
${color0}Memory ${hr 2}$color
${color1}RAM$color$alignc$mem/$memmax$alignr$memperc%
$color6${membar}${goto 5}$color9${execbar echo 0}
# Swap: $alignc$swap/$swapmax$alignr
# $swapbar
# Highest:${alignr 24}CPU${alignr}RAM
# ${voffset -1}${goto 32}${top_mem name 1}${alignr}${top_mem cpu 1}${alignr}${top_mem mem 1}
# ${voffset -1}${goto 32}${top_mem name 2}${alignr}${top_mem cpu 2}${alignr}${top_mem mem 2}
# ${voffset -1}${goto 32}${top_mem name 3}${alignr}${top_mem cpu 3}${alignr}${top_mem mem 3}
# ${voffset -1}${goto 32}${top_mem name 4}${alignr}${top_mem cpu 4}${alignr}${top_mem mem 4}
# ${voffset -1}${goto 32}${top_mem name 5}${alignr}${top_mem cpu 5}${alignr}${top_mem mem 5}
#
${color0}Disks ${hr 2}$color
$color1/$color$alignc${fs_used /}/${fs_size /}$alignr${fs_used_perc /}%
$color6${fs_bar}${goto 5}$color9${execbar echo 0}
# ${offset 30}I/O Read:$alignr${offset -10}${diskio_read /dev/nvme0n1p8}$alignr${diskiograph_read nvme0n1p8 10,100}
# ${offset 30}I/O Write:$alignr${offset -10}${diskio_write /dev/nvme0n1p8}$alignr${diskiograph_write nvme0n1p8 10,100}
${if_up wlp0s20f3}\
${color0}Network ${hr 2}$color
${color1}Local IP:$color$alignr${addrs wlp0s20f3}
${color1}Upspeed$color$alignr${upspeed wlp0s20f3}
$color9${upspeedgraph wlp0s20f3 10,300 EBCB8B D08770 -t}$color
${color1}Downspeed$color$alignr${downspeed wlp0s20f3}
$color9${downspeedgraph wlp0s20f3 10,300 EBCB8B D08770 -t}$color
${endif}\
#
${if_match ${exec nvidia-smi | grep 'failed' -c} == 0 }
${color0}Discrete GPU ${hr 2}$color
GPU:$alignr${exec if nvidia-smi; then nvidia-smi --query-supported-clocks=gpu_name --format=csv,noheader; fi}
${offset 30}GPU Temp $alignr${execi 60 if nvidia-smi; then nvidia-smi --query-gpu=temperature.gpu --format=csv,noheader; fi} °C
# #${color9}${offset 30}Fan Speed $alignr${execi 60 nvidia-settings -q [fan:0]/GPUCurrentFanSpeed -t} %
${offset 30}GPU Clock$alignr${execi 60 if nvidia-smi; then nvidia-settings -q GPUCurrentClockFreqs | grep -m 1 Attribute | awk '{print $4}' | sed -e 's/\.//' | cut -d, -f1; fi} MHz
${offset 30}Mem Clock$alignr${execi 86400 if nvidia-smi; then nvidia-settings -q all| grep -m 1 GPUCurrentProcessorClockFreqs | awk '{print $4}' | sed 's/.$//'; fi} MHz
${offset 30}Mem Used$alignr${execi 60 if nvidia-smi; then nvidia-settings -q [gpu:0]/UsedDedicatedGPUMemory -t; fi} / ${exec if nvidia-smi; then nvidia-settings -q [gpu:0]/TotalDedicatedGPUMemory -t; fi} MiB0
${endif}
]];
